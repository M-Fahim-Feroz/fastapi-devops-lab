name: FastAPI CI/CD Pipeline

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: üß± Build & Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
      - name: Build timestamp
        run: echo "Build started at $(date -u)"

  lint:
    name: üîç Lint & Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install tools
        run: pip install flake8 bandit
      - name: flake8
        run: flake8 api --max-line-length=120
      - name: bandit
        run: bandit -r api -lll

  test:
    name: üß™ Tests (Postgres + Redis + Celery)
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

      redis:
        image: redis:7
        ports: ["6379:6379"]
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=10

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      REDIS_URL: ${{ secrets.REDIS_URL }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install test deps
        run: |
          pip install -r api/requirements.txt
          pip install pytest pytest-asyncio psycopg2-binary
      - name: Start Celery worker (background)
        run: |
          nohup bash -c "celery -A api.tasks worker --loglevel=INFO" >/tmp/celery.log 2>&1 &
          sleep 5
          echo "Celery started. $(date -u)"
      - name: Run pytest
        run: |
          echo "Tests started at $(date -u)"
          pytest api/tests/tests.py -v --disable-warnings --maxfail=1
      - name: Show Celery logs on failure
        if: failure()
        run: |
          echo "---- Celery logs ----"
          tail -n 200 /tmp/celery.log || true

  docker:
    name: üê≥ Build & Tag Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Build image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-devops-lab:${{ github.sha }} .
          docker tag  ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-devops-lab:${{ github.sha }} \
                      ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-devops-lab:latest
      - name: Login to Docker Hub (main only)
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push images (main only)
        if: github.ref == 'refs/heads/main'
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-devops-lab:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-devops-lab:latest

  deploy:
    name: üöÄ Deploy (Conditional)
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deployment gate
        run: |
          echo "Deploy stage reached at $(date -u)."
          echo "Configure SSH_* secrets later to auto-deploy, or keep Docker Hub push as your 'cloud delivery' proof."
